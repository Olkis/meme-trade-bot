import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from dotenv import load_dotenv
from utils.data_sources import get_token_volume, get_liquidity
from utils.indicators import check_ema_cross, check_candle_pattern
from utils.risk_filters import check_contract, check_liquidity, load_callers_whitelist
from utils.virality import check_virality

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

<<<<< HEAD
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
=======
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
>>>>>>> c22c2e6685aa835f90199bb3c5544b5ee7f70395

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç. –û–∂–∏–¥–∞–π —Å–∏–≥–Ω–∞–ª–æ–≤...")

<<<<<<< HEAD
async def check_flip_signal(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data.get('chat_id')
    if not chat_id:
        logger.error("chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è FLIP")
        return
    try:
        token_address = "SAMPLE_TOKEN_ADDRESS"
        volume = await get_token_volume(token_address)
        liquidity = await get_liquidity(token_address)
        ema_cross = await check_ema_cross(token_address, "1m")
        candle_pattern = await check_candle_pattern(token_address, "1m")
        contract_ok = await check_contract(token_address)
        liquidity_ok = await check_liquidity(token_address, 2000)
        virality_ok = await check_virality("CATMOON", token_address)

        if (volume > 100000 and ema_cross and candle_pattern and contract_ok and
            liquidity_ok and virality_ok):
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üöÄ –°–∏–≥–Ω–∞–ª FLIP\n–ú–æ–Ω–µ—Ç–∞: $CATMOON\n–û–±—ä—ë–º: ${volume}\n–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity}\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ"
            )
            logger.info("–°–∏–≥–Ω–∞–ª FLIP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            logger.info("–£—Å–ª–æ–≤–∏—è –¥–ª—è FLIP –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_flip_signal: {e}")

async def check_level_signal(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data.get('chat_id')
    if not chat_id:
        logger.error("chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è LEVEL")
        return
    try:
        token_address = "SAMPLE_TOKEN_ADDRESS"
        volume = await get_token_volume(token_address)
        liquidity = await get_liquidity(token_address)
        ema_cross = await check_ema_cross(token_address, "5m")
        candle_pattern = await check_candle_pattern(token_address, "5m")
        contract_ok = await check_contract(token_address)
        liquidity_ok = await check_liquidity(token_address, 5000)
        virality_ok = await check_virality("LEVEL_TOKEN", token_address)

        if (volume > 20000 and ema_cross and candle_pattern and contract_ok and
            liquidity_ok and virality_ok):
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üöÄ –°–∏–≥–Ω–∞–ª LEVEL\n–ú–æ–Ω–µ—Ç–∞: $LEVEL_TOKEN\n–û–±—ä—ë–º: ${volume}\n–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity}\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ"
            )
            logger.info("–°–∏–≥–Ω–∞–ª LEVEL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            logger.info("–£—Å–ª–æ–≤–∏—è –¥–ª—è LEVEL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_level_signal: {e}")

async def set_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not chat_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
        return
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ JobQueue –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if context.job_queue is None:
            logger.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            await update.message.reply_text("–û—à–∏–±–∫–∞: JobQueue –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return
        context.job_queue.run_repeating(check_flip_signal, interval=60, first=0, data={'chat_id': chat_id})
        context.job_queue.run_repeating(check_level_signal, interval=300, first=0, data={'chat_id': chat_id})
        await update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FLIP –∏ LEVEL –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60s –∏ 300s.")
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è chat_id: {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
=======
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
async def test_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ [TEST] –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: FLIP\n–ú–æ–Ω–µ—Ç–∞: $CATMOON\n–û–±—ä—ë–º: $115K\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ"
    )
>>>>>>> c22c2e6685aa835f90199bb3c5544b5ee7f70395

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
<<<<<<< HEAD
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JobQueue
    app = ApplicationBuilder().token(TOKEN).job_queue(JobQueue()).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("monitor", set_monitoring))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
=======
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test", test_signal))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()
>>>>>>> c22c2e6685aa835f90199bb3c5544b5ee7f70395

if __name__ == "__main__":
    main()